
// 2009091304, 2016103000, 2013120800, 2013120805
var games = [
  [
  [3599, 0, 51, 10, 1, 1, 'CLE'], [3559, 0, 45, 4, 2, 1, 'CLE'], [3553, 0, 45, 4, 3, 1, 'CLE'], [3515, 0, 40, 10, 1, 1, 'CLE'], [3469, 0, 22, 10, 1, 1, 'CLE'], [3465, 0, 22, 10, 2, 1, 'CLE'], [3429, 0, 21, 9, 3, 1, 'CLE'], [3393, 0, 20, 8, 4, 1, 'CLE'], [3381, -3, 70, 10, 1, 0, 'MIN'], [3345, -3, 69, 9, 2, 0, 'MIN'], [3304, -3, 69, 9, 3, 0, 'MIN'], [3273, -3, 70, 10, 4, 0, 'MIN'], [3264, 3, 78, 10, 1, 1, 'CLE'], [3229, 3, 76, 8, 2, 1, 'CLE'], [3197, 3, 84, 16, 2, 1, 'CLE'], [3155, 3, 82, 14, 3, 1, 'CLE'], [3125, 3, 82, 14, 4, 1, 'CLE'], [3115, -3, 49, 10, 1, 0, 'MIN'], [3081, -3, 43, 4, 2, 0, 'MIN'], [3045, -3, 40, 1, 3, 0, 'MIN'], [3010, -3, 33, 10, 1, 0, 'MIN'], [2971, -3, 37, 14, 2, 0, 'MIN'], [2928, -3, 24, 1, 3, 0, 'MIN'], [2887, -3, 19, 10, 1, 0, 'MIN'], [2837, -3, 14, 5, 2, 0, 'MIN'], [2793, -3, 3, 3, 1, 0, 'MIN'], [2755, -3, 1, 1, 2, 0, 'MIN'], [2710, -3, 3, 3, 3, 0, 'MIN'], [2706, -3, 3, 3, 4, 0, 'MIN'], [2700, 0, 86, 10, 1, 1, 'CLE'], [2664, 0, 86, 10, 2, 1, 'CLE'], [2617, 0, 81, 5, 3, 1, 'CLE'], [2591, 0, 90, 14, 4, 1, 'CLE'], [2576, 0, 23, 10, 1, 0, 'MIN'], [2547, 0, 21, 8, 2, 0, 'MIN'], [2514, 0, 3, 3, 1, 0, 'MIN'], [2477, 0, 1, 1, 2, 0, 'MIN'], [2462, -7, 75, 10, 1, 1, 'CLE'], [2417, -7, 73, 8, 2, 1, 'CLE'], [2383, -7, 61, 10, 1, 1, 'CLE'], [2357, -7, 46, 10, 1, 1, 'CLE'], [2316, -7, 39, 3, 2, 1, 'CLE'], [2274, -7, 34, 10, 1, 1, 'CLE'], [2267, -7, 6, 6, 1, 1, 'CLE'], [2236, -7, 3, 3, 2, 1, 'CLE'], [2198, -7, 1, 1, 3, 1, 'CLE'], [2160, -7, 2, 2, 4, 1, 'CLE'], [2157, 4, 80, 10, 1, 0, 'MIN'], [2123, 4, 71, 1, 2, 0, 'MIN'], [2079, 4, 71, 1, 3, 0, 'MIN'], [2053, 4, 71, 1, 4, 0, 'MIN'], [2045, -4, 58, 10, 1, 1, 'CLE'], [2042, -4, 58, 10, 2, 1, 'CLE'], [2042, -4, 63, 15, 2, 1, 'CLE'], [2000, -4, 64, 16, 3, 1, 'CLE'], [1950, -4, 53, 5, 4, 1, 'CLE'], [1943, 4, 85, 10, 1, 0, 'MIN'], [1939, 4, 85, 10, 2, 0, 'MIN'], [1920, 4, 91, 16, 3, 0, 'MIN'], [1906, 4, 81, 6, 4, 0, 'MIN'], [1884, -2, 74, 10, 1, 0, 'MIN'], [1880, -2, 74, 10, 2, 0, 'MIN'], [1874, -2, 66, 2, 3, 0, 'MIN'], [1871, -2, 66, 2, 4, 0, 'MIN'], [1864, 2, 61, 10, 1, 1, 'CLE'], [1860, 2, 61, 10, 2, 1, 'CLE'], [1815, 2, 59, 8, 3, 1, 'CLE'], [1790, -2, 55, 10, 1, 0, 'MIN'], [1755, -2, 50, 5, 2, 0, 'MIN'], [1721, -2, 44, 10, 1, 0, 'MIN'], [1721, -2, 33, 10, 1, 0, 'MIN'], [1667, -2, 38, 15, 1, 0, 'MIN'], [1660, -2, 38, 15, 2, 0, 'MIN'], [1629, -2, 33, 10, 3, 0, 'MIN'], [1591, -2, 20, 10, 1, 0, 'MIN'], [1586, -2, 4, 4, 1, 0, 'MIN'], [1551, -2, 1, 1, 2, 0, 'MIN'], [1510, -2, 1, 1, 3, 0, 'MIN'], [1499, -5, 72, 10, 1, 1, 'CLE'], [1462, -5, 58, 10, 1, 1, 'CLE'], [1425, -5, 50, 2, 2, 1, 'CLE'], [1418, 5, 82, 10, 1, 0, 'MIN'], [1373, 5, 80, 8, 2, 0, 'MIN'], [1334, 5, 73, 1, 3, 0, 'MIN'], [1291, 5, 71, 10, 1, 0, 'MIN'], [1269, 5, 79, 18, 2, 0, 'MIN'], [1233, 5, 58, 10, 1, 0, 'MIN'], [1202, 5, 52, 4, 2, 0, 'MIN'], [1173, 5, 45, 10, 1, 0, 'MIN'], [1131, 5, 40, 5, 2, 0, 'MIN'], [1091, 5, 32, 10, 1, 0, 'MIN'], [1051, 5, 13, 10, 1, 0, 'MIN'], [1011, 5, 15, 12, 2, 0, 'MIN'], [972, 5, 6, 3, 3, 0, 'MIN'], [960, -12, 81, 10, 1, 1, 'CLE'], [934, -12, 70, 10, 1, 1, 'CLE'], [903, -12, 68, 8, 2, 1, 'CLE'], [900, -12, 65, 5, 3, 1, 'CLE'], [900, -12, 60, 10, 1, 1, 'CLE'], [865, -12, 48, 10, 1, 1, 'CLE'], [859, -12, 48, 10, 2, 1, 'CLE'], [859, -12, 46, 8, 3, 1, 'CLE'], [808, -12, 51, 13, 3, 1, 'CLE'], [803, -12, 51, 13, 4, 1, 'CLE'], [795, 12, 88, 10, 1, 0, 'MIN'], [767, 12, 76, 10, 1, 0, 'MIN'], [763, 12, 76, 10, 2, 0, 'MIN'], [721, 12, 72, 6, 3, 0, 'MIN'], [715, 12, 72, 6, 4, 0, 'MIN'], [703, -12, 73, 10, 1, 1, 'CLE'], [680, -12, 72, 9, 2, 1, 'CLE'], [657, -12, 65, 2, 3, 1, 'CLE'], [639, -12, 70, 7, 3, 1, 'CLE'], [615, -12, 60, 10, 1, 1, 'CLE'], [601, 12, 34, 10, 1, 0, 'MIN'], [566, 12, 31, 7, 2, 0, 'MIN'], [535, 12, 12, 10, 1, 0, 'MIN'], [491, 12, 10, 8, 2, 0, 'MIN'], [458, 12, 17, 15, 3, 0, 'MIN'], [419, 12, 20, 18, 4, 0, 'MIN'], [408, -15, 74, 10, 1, 1, 'CLE'], [408, -15, 79, 15, 1, 1, 'CLE'], [405, -15, 79, 15, 2, 1, 'CLE'], [398, -15, 79, 15, 3, 1, 'CLE'], [381, -15, 71, 7, 4, 1, 'CLE'], [371, 15, 64, 10, 1, 0, 'MIN'], [353, -22, 81, 10, 1, 1, 'CLE'], [335, -22, 83, 12, 2, 1, 'CLE'], [308, -22, 64, 10, 1, 1, 'CLE'], [304, -22, 64, 10, 2, 1, 'CLE'], [300, -22, 64, 10, 3, 1, 'CLE'], [292, -22, 64, 10, 4, 1, 'CLE'], [287, 22, 36, 10, 1, 0, 'MIN'], [245, 22, 34, 8, 2, 0, 'MIN'], [200, 22, 35, 9, 3, 0, 'MIN'], [192, 22, 35, 9, 4, 0, 'MIN'], [183, -22, 80, 10, 1, 1, 'CLE'], [159, -22, 70, 10, 1, 1, 'CLE'], [130, -22, 59, 10, 1, 1, 'CLE'], [124, -22, 59, 10, 2, 1, 'CLE'], [116, -22, 42, 10, 1, 1, 'CLE'], [97, -22, 37, 5, 2, 1, 'CLE'], [74, -22, 26, 10, 1, 1, 'CLE'], [68, -22, 36, 20, 1, 1, 'CLE'], [59, -22, 18, 2, 2, 1, 'CLE'], [35, -22, 26, 10, 3, 1, 'CLE'], [28, 15, 55, 10, 1, 0, 'MIN'],
  ],
  [
  [3594, 0, 80, 10, 1, 0, 'WAS'], [3574, 0, 73, 3, 2, 0, 'WAS'], [3530, 0, 73, 3, 3, 0, 'WAS'], [3504, 0, 69, 10, 1, 0, 'WAS'], [3500, 0, 69, 10, 2, 0, 'WAS'], [3459, 0, 57, 10, 1, 0, 'WAS'], [3454, 0, 57, 10, 2, 0, 'WAS'], [3405, 0, 40, 10, 1, 0, 'WAS'], [3363, 0, 36, 6, 2, 0, 'WAS'], [3328, 0, 32, 2, 3, 0, 'WAS'], [3290, 0, 26, 10, 1, 0, 'WAS'], [3250, 0, 23, 7, 2, 0, 'WAS'], [3246, 0, 23, 7, 3, 0, 'WAS'], [3204, 0, 11, 10, 1, 0, 'WAS'], [3164, 0, 4, 3, 2, 0, 'WAS'], [3147, -7, 36, 10, 1, 1, 'CIN'], [3110, -7, 39, 13, 2, 1, 'CIN'], [3070, -7, 33, 7, 3, 1, 'CIN'], [3032, -7, 25, 10, 1, 1, 'CIN'], [3009, -7, 16, 1, 2, 1, 'CIN'], [2976, -7, 13, 10, 1, 1, 'CIN'], [2938, -7, 8, 5, 2, 1, 'CIN'], [2927, 0, 81, 10, 1, 0, 'WAS'], [2874, 0, 74, 3, 2, 0, 'WAS'], [2851, 0, 79, 8, 2, 0, 'WAS'], [2810, 0, 75, 4, 3, 0, 'WAS'], [2778, 0, 54, 10, 1, 0, 'WAS'], [2736, 0, 50, 6, 2, 0, 'WAS'], [2700, 0, 27, 10, 1, 0, 'WAS'], [2669, 0, 21, 4, 2, 0, 'WAS'], [2645, 0, 20, 3, 3, 0, 'WAS'], [2597, 0, 18, 1, 4, 0, 'WAS'], [2590, 0, 82, 10, 1, 1, 'CIN'], [2585, 0, 82, 10, 2, 1, 'CIN'], [2554, 0, 80, 8, 3, 1, 'CIN'], [2550, 0, 80, 8, 4, 1, 'CIN'], [2540, 0, 79, 10, 1, 0, 'WAS'], [2522, 0, 35, 10, 1, 0, 'WAS'], [2481, 0, 20, 10, 1, 0, 'WAS'], [2443, 0, 20, 10, 2, 0, 'WAS'], [2425, 0, 16, 6, 3, 0, 'WAS'], [2390, 0, 8, 8, 1, 0, 'WAS'], [2348, 0, 5, 5, 2, 0, 'WAS'], [2343, 0, 5, 5, 3, 0, 'WAS'], [2301, 0, 2, 2, 4, 0, 'WAS'], [2296, -3, 75, 10, 1, 1, 'CIN'], [2271, -3, 70, 10, 1, 1, 'CIN'], [2237, -3, 61, 1, 2, 1, 'CIN'], [2195, -3, 52, 10, 1, 1, 'CIN'], [2179, -3, 47, 10, 1, 1, 'CIN'], [2136, -3, 37, 10, 1, 1, 'CIN'], [2097, -3, 36, 9, 2, 1, 'CIN'], [2053, -3, 45, 18, 3, 1, 'CIN'], [2009, -3, 33, 6, 4, 1, 'CIN'], [2005, 3, 59, 10, 1, 0, 'WAS'], [1999, 3, 59, 10, 2, 0, 'WAS'], [1953, 3, 63, 14, 3, 0, 'WAS'], [1944, -3, 86, 10, 1, 1, 'CIN'], [1920, -3, 76, 10, 1, 1, 'CIN'], [1917, -3, 71, 10, 1, 1, 'CIN'], [1910, -3, 71, 10, 2, 1, 'CIN'], [1892, -3, 69, 8, 3, 1, 'CIN'], [1888, -3, 69, 8, 4, 1, 'CIN'], [1881, 3, 73, 10, 1, 0, 'WAS'], [1876, 3, 68, 5, 2, 0, 'WAS'], [1848, 3, 68, 5, 3, 0, 'WAS'], [1839, 3, 47, 10, 1, 0, 'WAS'], [1835, 3, 47, 10, 2, 0, 'WAS'], [1829, 3, 44, 7, 3, 0, 'WAS'], [1804, 3, 38, 1, 4, 0, 'WAS'], [1800, -3, 75, 10, 1, 1, 'CIN'], [1768, -3, 65, 10, 1, 1, 'CIN'], [1740, -3, 53, 10, 1, 1, 'CIN'], [1704, -3, 50, 7, 2, 1, 'CIN'], [1666, -3, 47, 4, 3, 1, 'CIN'], [1646, -3, 42, 10, 1, 1, 'CIN'], [1642, -3, 42, 10, 2, 1, 'CIN'], [1639, -3, 42, 10, 3, 1, 'CIN'], [1603, -3, 31, 10, 1, 1, 'CIN'], [1583, -3, 19, 10, 1, 1, 'CIN'], [1546, -3, 15, 6, 2, 1, 'CIN'], [1542, -3, 75, 10, 1, 0, 'WAS'], [1537, -3, 75, 10, 2, 0, 'WAS'], [1499, -3, 87, 22, 3, 0, 'WAS'], [1465, -3, 76, 11, 4, 0, 'WAS'], [1453, 3, 64, 10, 1, 1, 'CIN'], [1425, 3, 63, 9, 2, 1, 'CIN'], [1387, 3, 57, 3, 3, 1, 'CIN'], [1359, 3, 43, 10, 1, 1, 'CIN'], [1353, 3, 43, 10, 2, 1, 'CIN'], [1316, 3, 36, 3, 3, 1, 'CIN'], [1297, 3, 27, 10, 1, 1, 'CIN'], [1274, 3, 12, 10, 1, 1, 'CIN'], [1252, 3, 3, 3, 1, 1, 'CIN'], [1220, 3, 1, 1, 2, 1, 'CIN'], [1210, -10, 91, 10, 1, 0, 'WAS'], [1184, -10, 83, 2, 2, 0, 'WAS'], [1162, -10, 45, 10, 1, 0, 'WAS'], [1131, -10, 26, 10, 1, 0, 'WAS'], [1092, -10, 23, 7, 2, 0, 'WAS'], [1082, 3, 75, 10, 1, 1, 'CIN'], [1054, 3, 55, 10, 1, 1, 'CIN'], [1025, 3, 52, 7, 2, 1, 'CIN'], [989, 3, 44, 10, 1, 1, 'CIN'], [959, 3, 36, 2, 2, 1, 'CIN'], [927, 3, 34, 10, 1, 1, 'CIN'], [900, 3, 30, 6, 2, 1, 'CIN'], [875, 3, 27, 3, 3, 1, 'CIN'], [870, 3, 20, 10, 1, 1, 'CIN'], [835, 3, 20, 10, 2, 1, 'CIN'], [828, -3, 83, 10, 1, 0, 'WAS'], [782, -3, 57, 10, 1, 0, 'WAS'], [745, -3, 52, 5, 2, 0, 'WAS'], [704, -3, 48, 1, 3, 0, 'WAS'], [670, -3, 45, 10, 1, 0, 'WAS'], [631, -3, 35, 10, 1, 0, 'WAS'], [616, -3, 40, 15, 1, 0, 'WAS'], [579, -3, 33, 8, 2, 0, 'WAS'], [570, -4, 75, 10, 1, 1, 'CIN'], [549, -4, 74, 9, 2, 1, 'CIN'], [514, -4, 69, 4, 3, 1, 'CIN'], [484, -4, 47, 10, 1, 1, 'CIN'], [462, -4, 7, 7, 1, 1, 'CIN'], [423, -4, 2, 2, 2, 1, 'CIN'], [418, -4, 1, 1, 1, 1, 'CIN'], [406, -3, 82, 10, 1, 0, 'WAS'], [369, -3, 80, 8, 2, 0, 'WAS'], [366, -3, 80, 8, 3, 0, 'WAS'], [359, -3, 80, 8, 4, 0, 'WAS'], [344, 3, 82, 10, 1, 1, 'CIN'], [299, 3, 76, 4, 2, 1, 'CIN'], [260, 3, 74, 2, 3, 1, 'CIN'], [221, 3, 69, 10, 1, 1, 'CIN'], [215, 3, 68, 9, 2, 1, 'CIN'], [212, 3, 68, 9, 3, 1, 'CIN'], [207, 3, 68, 9, 4, 1, 'CIN'], [195, -3, 67, 10, 1, 0, 'WAS'], [161, -3, 63, 6, 2, 0, 'WAS'], [157, -3, 56, 10, 1, 0, 'WAS'], [127, -3, 39, 10, 1, 0, 'WAS'], [120, -3, 42, 13, 2, 0, 'WAS'], [116, -3, 42, 13, 3, 0, 'WAS'], [87, -3, 22, 10, 1, 0, 'WAS'], [81, -3, 22, 10, 2, 0, 'WAS'], [76, -3, 22, 10, 3, 0, 'WAS'], [71, -3, 22, 10, 4, 0, 'WAS'], [67, 0, 75, 10, 1, 1, 'CIN'], [46, 0, 62, 10, 1, 1, 'CIN'], [38, 0, 62, 10, 2, 1, 'CIN'], [32, 0, 57, 10, 1, 1, 'CIN'], [25, 0, 57, 10, 2, 1, 'CIN'], [21, 0, 57, 10, 3, 1, 'CIN'], [11, 0, 61, 14, 4, 1, 'CIN'], [3, 0, 80, 10, 1, 0, 'WAS'], [0, 0, 75, 10, 1, 0, 'WAS'], [-36, 0, 59, 10, 1, 0, 'WAS'], [-77, 0, 56, 7, 2, 0, 'WAS'], [-97, 0, 61, 12, 2, 0, 'WAS'], [-127, 0, 48, 10, 1, 0, 'WAS'], [-168, 0, 45, 7, 2, 0, 'WAS'], [-173, 0, 45, 7, 3, 0, 'WAS'], [-178, 0, 45, 7, 4, 0, 'WAS'], [-186, 0, 83, 10, 1, 1, 'CIN'], [-212, 0, 69, 10, 1, 1, 'CIN'], [-238, 0, 61, 2, 2, 1, 'CIN'], [-267, 0, 57, 10, 1, 1, 'CIN'], [-310, 0, 56, 9, 2, 1, 'CIN'], [-317, 0, 66, 19, 2, 1, 'CIN'], [-361, 0, 56, 9, 3, 1, 'CIN'], [-391, 0, 42, 10, 1, 1, 'CIN'], [-435, 0, 40, 8, 2, 1, 'CIN'], [-439, 0, 40, 8, 3, 1, 'CIN'], [-480, 0, 48, 16, 4, 1, 'CIN'], [-487, 0, 78, 10, 1, 0, 'WAS'], [-516, 0, 72, 4, 2, 0, 'WAS'], [-544, 0, 58, 10, 1, 0, 'WAS'], [-572, 0, 46, 10, 1, 0, 'WAS'], [-611, 0, 42, 6, 2, 0, 'WAS'], [-649, 0, 37, 1, 3, 0, 'WAS'], [-655, 0, 32, 10, 1, 0, 'WAS'], [-688, 0, 28, 6, 2, 0, 'WAS'], [-692, 0, 19, 10, 1, 0, 'WAS'], [-697, 0, 29, 20, 1, 0, 'WAS'], [-728, 0, 13, 4, 2, 0, 'WAS'], [-767, 0, 16, 7, 3, 0, 'WAS'], [-771, 0, 76, 10, 1, 1, 'CIN'], [-780, 0, 72, 6, 2, 1, 'CIN'], [-803, 0, 63, 10, 1, 1, 'CIN'], [-809, 0, 63, 10, 2, 1, 'CIN'], [-829, 0, 54, 1, 3, 1, 'CIN'], [-838, 0, 47, 10, 1, 0, 'WAS'], [-846, 0, 57, 20, 1, 0, 'WAS'], [-854, 0, 57, 20, 2, 0, 'WAS'], [-870, 0, 56, 19, 3, 0, 'WAS'], [-898, 0, 48, 11, 4, 0, 'WAS'],
  ],
  [
  [3595, 0, 78, 10, 1, 1, 'BAL'], [3595, 0, 78, 10, 2, 1, 'BAL'], [3558, 0, 76, 8, 3, 1, 'BAL'], [3558, 0, 68, 10, 1, 1, 'BAL'], [3480, 0, 51, 10, 1, 1, 'BAL'], [3447, 0, 45, 4, 2, 1, 'BAL'], [3413, 0, 40, 10, 1, 1, 'BAL'], [3377, 0, 34, 4, 2, 1, 'BAL'], [3368, 0, 82, 10, 1, 0, 'MIN'], [3334, 0, 82, 10, 2, 0, 'MIN'], [3292, 0, 79, 7, 3, 0, 'MIN'], [3286, 0, 79, 7, 4, 0, 'MIN'], [3275, 0, 60, 10, 1, 1, 'BAL'], [3247, 0, 58, 8, 2, 1, 'BAL'], [3238, 0, 58, 8, 3, 1, 'BAL'], [3233, 0, 58, 8, 4, 1, 'BAL'], [3221, 0, 94, 10, 1, 0, 'MIN'], [3185, 0, 92, 8, 2, 0, 'MIN'], [3173, 0, 90, 6, 3, 0, 'MIN'], [3124, 0, 70, 10, 1, 0, 'MIN'], [3096, 0, 80, 20, 1, 0, 'MIN'], [3089, 0, 25, 10, 1, 1, 'BAL'], [3035, 0, 3, 3, 1, 1, 'BAL'], [3002, 0, 2, 2, 2, 1, 'BAL'], [2960, 0, 1, 1, 3, 1, 'BAL'], [2948, -7, 80, 10, 1, 0, 'MIN'], [2939, -7, 80, 10, 2, 0, 'MIN'], [2898, -7, 76, 6, 3, 0, 'MIN'], [2858, -7, 52, 10, 1, 0, 'MIN'], [2815, -7, 49, 7, 2, 0, 'MIN'], [2806, -7, 49, 7, 3, 0, 'MIN'], [2803, -7, 49, 7, 4, 0, 'MIN'], [2791, 7, 93, 10, 1, 1, 'BAL'], [2791, 7, 88, 5, 1, 1, 'BAL'], [2757, 7, 85, 2, 2, 1, 'BAL'], [2752, 7, 85, 2, 3, 1, 'BAL'], [2706, 7, 88, 5, 4, 1, 'BAL'], [2700, -7, 81, 10, 1, 0, 'MIN'], [2664, -7, 69, 10, 1, 0, 'MIN'], [2661, -7, 69, 10, 2, 0, 'MIN'], [2625, -7, 70, 11, 3, 0, 'MIN'], [2617, -7, 70, 11, 4, 0, 'MIN'], [2606, 7, 48, 10, 1, 1, 'BAL'], [2600, 7, 48, 10, 2, 1, 'BAL'], [2556, 7, 52, 14, 3, 1, 'BAL'], [2549, 7, 52, 14, 4, 1, 'BAL'], [2541, -7, 80, 10, 1, 0, 'MIN'], [2537, -7, 80, 10, 2, 0, 'MIN'], [2493, -7, 75, 5, 3, 0, 'MIN'], [2472, -7, 71, 1, 4, 0, 'MIN'], [2459, 7, 73, 10, 1, 1, 'BAL'], [2428, 7, 73, 10, 2, 1, 'BAL'], [2423, 7, 73, 10, 3, 1, 'BAL'], [2418, 7, 73, 10, 4, 1, 'BAL'], [2410, -7, 66, 10, 1, 0, 'MIN'], [2366, -7, 45, 10, 1, 0, 'MIN'], [2361, -7, 45, 10, 2, 0, 'MIN'], [2322, -7, 50, 15, 3, 0, 'MIN'], [2283, -7, 38, 3, 4, 0, 'MIN'], [2247, -7, 32, 10, 1, 0, 'MIN'], [2240, -7, 32, 10, 2, 0, 'MIN'], [2198, -7, 21, 10, 1, 0, 'MIN'], [2192, -7, 21, 10, 2, 0, 'MIN'], [2151, -7, 20, 9, 3, 0, 'MIN'], [2116, -7, 35, 24, 3, 0, 'MIN'], [2073, -7, 21, 10, 4, 0, 'MIN'], [2061, 4, 74, 10, 1, 1, 'BAL'], [2033, 4, 73, 9, 2, 1, 'BAL'], [2016, 4, 68, 4, 2, 1, 'BAL'], [1983, 4, 69, 5, 3, 1, 'BAL'], [1977, 4, 69, 5, 4, 1, 'BAL'], [1965, -4, 67, 10, 1, 0, 'MIN'], [1930, -4, 47, 10, 1, 0, 'MIN'], [1920, -4, 43, 6, 2, 0, 'MIN'], [1884, -4, 43, 6, 3, 0, 'MIN'], [1876, -4, 43, 6, 4, 0, 'MIN'], [1869, 4, 80, 10, 1, 1, 'BAL'], [1862, 4, 68, 10, 1, 1, 'BAL'], [1852, 4, 78, 20, 1, 1, 'BAL'], [1844, 4, 65, 7, 2, 1, 'BAL'], [1840, 4, 65, 7, 3, 1, 'BAL'], [1832, 4, 56, 10, 1, 1, 'BAL'], [1826, 4, 56, 10, 2, 1, 'BAL'], [1820, 4, 47, 1, 3, 1, 'BAL'], [1820, 4, 40, 10, 1, 1, 'BAL'], [1804, 4, 40, 10, 2, 1, 'BAL'], [1792, -4, 60, 10, 1, 0, 'MIN'], [1755, -4, 49, 10, 1, 0, 'MIN'], [1717, -4, 49, 10, 2, 0, 'MIN'], [1711, -4, 49, 10, 3, 0, 'MIN'], [1679, -4, 30, 10, 1, 0, 'MIN'], [1638, -4, 22, 2, 2, 0, 'MIN'], [1631, -4, 22, 2, 3, 0, 'MIN'], [1627, -4, 22, 2, 4, 0, 'MIN'], [1617, 1, 75, 10, 1, 1, 'BAL'], [1580, 1, 75, 10, 2, 1, 'BAL'], [1552, 1, 74, 9, 3, 1, 'BAL'], [1514, 1, 66, 1, 4, 1, 'BAL'], [1505, -1, 80, 10, 1, 0, 'MIN'], [1479, -1, 79, 9, 2, 0, 'MIN'], [1440, -1, 78, 8, 3, 0, 'MIN'], [1434, -1, 78, 8, 4, 0, 'MIN'], [1423, 1, 71, 10, 1, 1, 'BAL'], [1394, 1, 69, 8, 2, 1, 'BAL'], [1352, 1, 65, 4, 3, 1, 'BAL'], [1319, 1, 59, 10, 1, 1, 'BAL'], [1285, 1, 52, 3, 2, 1, 'BAL'], [1250, 1, 44, 10, 1, 1, 'BAL'], [1221, 1, 40, 6, 2, 1, 'BAL'], [1215, 1, 40, 6, 3, 1, 'BAL'], [1182, 1, 36, 2, 4, 1, 'BAL'], [1174, -1, 64, 10, 1, 0, 'MIN'], [1137, -1, 64, 10, 2, 0, 'MIN'], [1094, -1, 57, 3, 3, 0, 'MIN'], [1089, -1, 57, 3, 4, 0, 'MIN'], [1078, 1, 80, 10, 1, 1, 'BAL'], [1047, 1, 74, 4, 2, 1, 'BAL'], [1003, 1, 69, 10, 1, 1, 'BAL'], [969, 1, 64, 5, 2, 1, 'BAL'], [962, -1, 33, 10, 1, 0, 'MIN'], [962, -1, 27, 4, 2, 0, 'MIN'], [906, -1, 10, 10, 1, 0, 'MIN'], [900, -1, 7, 7, 2, 0, 'MIN'], [868, -1, 8, 8, 3, 0, 'MIN'], [862, -5, 60, 10, 1, 1, 'BAL'], [822, -5, 49, 10, 1, 1, 'BAL'], [792, -5, 40, 1, 2, 1, 'BAL'], [761, -5, 30, 10, 1, 1, 'BAL'], [726, -5, 30, 10, 2, 1, 'BAL'], [695, -5, 23, 3, 3, 1, 'BAL'], [642, -5, 21, 1, 4, 1, 'BAL'], [636, 5, 79, 10, 1, 0, 'MIN'], [632, 5, 79, 10, 2, 0, 'MIN'], [596, 5, 75, 6, 3, 0, 'MIN'], [591, 5, 75, 6, 4, 0, 'MIN'], [581, -5, 69, 10, 1, 1, 'BAL'], [554, -5, 57, 10, 1, 1, 'BAL'], [547, -5, 57, 10, 2, 1, 'BAL'], [516, -5, 46, 10, 1, 1, 'BAL'], [491, -5, 45, 9, 2, 1, 'BAL'], [485, -5, 45, 9, 3, 1, 'BAL'], [474, 5, 90, 10, 1, 0, 'MIN'], [467, 5, 90, 10, 2, 0, 'MIN'], [428, 5, 87, 7, 3, 0, 'MIN'], [404, 5, 83, 3, 4, 0, 'MIN'], [392, -5, 64, 10, 1, 1, 'BAL'], [366, -5, 59, 5, 2, 1, 'BAL'], [338, -5, 44, 10, 1, 1, 'BAL'], [311, -5, 54, 20, 1, 1, 'BAL'], [303, -5, 17, 10, 1, 1, 'BAL'], [272, -5, 20, 13, 2, 1, 'BAL'], [243, -5, 13, 6, 3, 1, 'BAL'], [200, -5, 7, 7, 1, 1, 'BAL'], [155, -5, 1, 1, 2, 1, 'BAL'], [131, -5, 1, 1, 3, 1, 'BAL'], [127, -5, 1, 1, 4, 1, 'BAL'], [120, -3, 68, 10, 1, 0, 'MIN'], [105, -3, 41, 10, 1, 0, 'MIN'], [71, -3, 79, 10, 1, 0, 'MIN'], [65, -3, 79, 10, 2, 0, 'MIN'], [61, -3, 79, 10, 3, 0, 'MIN'], [45, -4, 80, 10, 1, 1, 'BAL'], [38, -4, 45, 10, 1, 1, 'BAL'], [32, -4, 45, 10, 2, 1, 'BAL'], [24, -4, 27, 10, 1, 1, 'BAL'], [18, -4, 27, 10, 2, 1, 'BAL'], [9, -4, 9, 9, 1, 1, 'BAL'],
  ],
  [
  [3597, 0, 84, 10, 1, 0, 'DET'], [3591, 0, 84, 10, 2, 0, 'DET'], [3551, 0, 83, 9, 3, 0, 'DET'], [3522, 0, 77, 3, 4, 0, 'DET'], [3511, 0, 67, 10, 1, 1, 'PHI'], [3486, 0, 65, 8, 2, 1, 'PHI'], [3472, 0, 60, 3, 2, 1, 'PHI'], [3428, 0, 70, 13, 3, 1, 'PHI'], [3395, 0, 64, 7, 4, 1, 'PHI'], [3388, 0, 64, 10, 1, 0, 'DET'], [3351, 0, 57, 3, 2, 0, 'DET'], [3304, 0, 61, 7, 3, 0, 'DET'], [3273, 0, 54, 10, 1, 0, 'DET'], [3230, 0, 52, 8, 2, 0, 'DET'], [3199, 0, 44, 10, 1, 0, 'DET'], [3158, 0, 43, 9, 2, 0, 'DET'], [3113, 0, 44, 10, 3, 0, 'DET'], [3086, 0, 49, 15, 3, 0, 'DET'], [3039, 0, 26, 10, 1, 0, 'DET'], [2998, 0, 28, 12, 2, 0, 'DET'], [2987, 0, 80, 10, 1, 1, 'PHI'], [2948, 0, 85, 15, 2, 1, 'PHI'], [2916, 0, 80, 10, 3, 1, 'PHI'], [2910, 0, 80, 10, 4, 1, 'PHI'], [2898, 0, 60, 10, 1, 0, 'DET'], [2860, 0, 55, 5, 2, 0, 'DET'], [2820, 0, 50, 10, 1, 0, 'DET'], [2786, 0, 46, 6, 2, 0, 'DET'], [2781, 0, 46, 6, 3, 0, 'DET'], [2738, 0, 13, 10, 1, 0, 'DET'], [2700, 0, 13, 10, 2, 0, 'DET'], [2661, 0, 10, 7, 3, 0, 'DET'], [2652, 0, 91, 10, 1, 1, 'PHI'], [2645, 0, 91, 10, 2, 1, 'PHI'], [2615, 0, 90, 9, 3, 1, 'PHI'], [2606, 0, 90, 9, 4, 1, 'PHI'], [2594, 0, 62, 10, 1, 0, 'DET'], [2559, 0, 62, 10, 2, 0, 'DET'], [2553, 0, 62, 10, 3, 0, 'DET'], [2546, 0, 62, 10, 4, 0, 'DET'], [2539, 0, 67, 10, 1, 1, 'PHI'], [2526, 0, 20, 10, 1, 0, 'DET'], [2484, 0, 20, 10, 2, 0, 'DET'], [2442, 0, 12, 2, 3, 0, 'DET'], [2437, 0, 12, 2, 4, 0, 'DET'], [2407, 0, 2, 2, 1, 0, 'DET'], [2402, -8, 80, 10, 1, 1, 'PHI'], [2373, -8, 72, 2, 2, 1, 'PHI'], [2346, -8, 69, 10, 1, 1, 'PHI'], [2317, -8, 68, 9, 2, 1, 'PHI'], [2287, -8, 76, 17, 3, 1, 'PHI'], [2254, -8, 71, 12, 4, 1, 'PHI'], [2245, 8, 64, 10, 1, 0, 'DET'], [2206, 8, 63, 9, 2, 0, 'DET'], [2165, 8, 60, 6, 3, 0, 'DET'], [2159, 8, 60, 6, 4, 0, 'DET'], [2150, -8, 89, 10, 1, 1, 'PHI'], [2124, -8, 75, 10, 1, 1, 'PHI'], [2091, -8, 68, 3, 2, 1, 'PHI'], [2058, -8, 60, 10, 1, 1, 'PHI'], [2029, -8, 60, 10, 2, 1, 'PHI'], [2000, -8, 51, 1, 3, 1, 'PHI'], [1993, -8, 46, 10, 1, 1, 'PHI'], [1959, -8, 44, 8, 2, 1, 'PHI'], [1936, -8, 27, 10, 1, 1, 'PHI'], [1920, -8, 24, 7, 2, 1, 'PHI'], [1914, -8, 13, 10, 1, 1, 'PHI'], [1880, -8, 15, 12, 2, 1, 'PHI'], [1874, -8, 15, 12, 3, 1, 'PHI'], [1856, -8, 10, 7, 4, 1, 'PHI'], [1849, 8, 90, 10, 1, 0, 'DET'], [1844, 8, 83, 3, 2, 0, 'DET'], [1839, 8, 82, 2, 3, 0, 'DET'], [1800, -8, 80, 10, 1, 1, 'PHI'], [1797, -8, 80, 10, 2, 1, 'PHI'], [1765, -8, 76, 6, 3, 1, 'PHI'], [1733, -8, 63, 10, 1, 1, 'PHI'], [1710, -8, 63, 10, 2, 1, 'PHI'], [1704, -8, 63, 10, 3, 1, 'PHI'], [1699, -8, 63, 10, 4, 1, 'PHI'], [1692, 8, 75, 10, 1, 0, 'DET'], [1654, 8, 71, 6, 2, 0, 'DET'], [1609, 8, 67, 2, 3, 0, 'DET'], [1572, 8, 53, 10, 1, 0, 'DET'], [1534, 8, 46, 3, 2, 0, 'DET'], [1495, 8, 42, 10, 1, 0, 'DET'], [1492, 8, 42, 10, 2, 0, 'DET'], [1452, 8, 38, 6, 3, 0, 'DET'], [1420, 8, 36, 4, 4, 0, 'DET'], [1414, -8, 89, 10, 1, 1, 'PHI'], [1378, -8, 95, 16, 2, 1, 'PHI'], [1344, -8, 84, 5, 3, 1, 'PHI'], [1313, -8, 85, 6, 4, 1, 'PHI'], [1291, -14, 74, 10, 1, 1, 'PHI'], [1262, -14, 70, 6, 2, 1, 'PHI'], [1226, -14, 70, 6, 3, 1, 'PHI'], [1219, -14, 75, 11, 3, 1, 'PHI'], [1187, -14, 63, 10, 1, 1, 'PHI'], [1153, -14, 19, 10, 1, 1, 'PHI'], [1138, 8, 72, 10, 1, 0, 'DET'], [1104, 8, 63, 1, 2, 0, 'DET'], [1066, 8, 63, 1, 3, 0, 'DET'], [1027, 8, 53, 10, 1, 0, 'DET'], [985, 8, 52, 9, 2, 0, 'DET'], [936, 8, 51, 8, 3, 0, 'DET'], [931, 8, 51, 8, 4, 0, 'DET'], [924, -8, 80, 10, 1, 1, 'PHI'], [900, -8, 55, 10, 1, 1, 'PHI'], [898, -8, 55, 10, 2, 1, 'PHI'], [891, -8, 40, 10, 1, 1, 'PHI'], [882, -8, 40, 10, 2, 1, 'PHI'], [854, -6, 76, 10, 1, 1, 'PHI'], [828, -6, 70, 4, 2, 1, 'PHI'], [803, -6, 57, 10, 1, 1, 'PHI'], [788, -2, 69, 10, 1, 0, 'DET'], [785, -2, 69, 10, 2, 0, 'DET'], [776, -2, 69, 10, 3, 0, 'DET'], [755, -2, 74, 15, 3, 0, 'DET'], [747, -2, 74, 15, 4, 0, 'DET'], [740, 2, 71, 10, 1, 1, 'PHI'], [692, 2, 45, 10, 1, 1, 'PHI'], [659, 2, 25, 10, 1, 1, 'PHI'], [612, 2, 8, 8, 1, 1, 'PHI'], [584, 2, 4, 4, 2, 1, 'PHI'], [568, 2, 2, 2, 2, 1, 'PHI'], [530, 2, 1, 1, 3, 1, 'PHI'], [498, 2, 1, 1, 4, 1, 'PHI'], [489, -8, 52, 10, 1, 0, 'DET'], [446, -8, 24, 10, 1, 0, 'DET'], [435, 8, 60, 10, 1, 1, 'PHI'], [397, 8, 57, 7, 2, 1, 'PHI'], [375, 8, 52, 2, 2, 1, 'PHI'], [329, 8, 51, 1, 3, 1, 'PHI'], [280, 8, 50, 10, 1, 1, 'PHI'], [231, 8, 41, 1, 2, 1, 'PHI'], [186, 8, 38, 10, 1, 1, 'PHI'], [171, -14, 65, 10, 1, 0, 'DET'], [167, -14, 65, 10, 2, 0, 'DET'], [164, -14, 65, 10, 3, 0, 'DET'], [159, -14, 65, 10, 4, 0, 'DET'], [153, 14, 35, 10, 1, 1, 'PHI'], [147, 14, 35, 10, 2, 1, 'PHI'], [140, 14, 35, 10, 3, 1, 'PHI'], [120, 14, 37, 12, 4, 1, 'PHI'], [50, 14, 10, 10, 1, 1, 'PHI'], [31, 14, 11, 11, 2, 1, 'PHI'],
  ],
];

var gameIndex = 1;
var game = games[gameIndex];
var gaussianConstant = new Decimal(1).dividedBy(Math.sqrt(2 * Math.PI));
var chartMin = -30;
var chartMax = 30;
var chartIncrements = 0.5;
var initData = [];
var initLabels = [];
for (var i = chartMin; i <= chartMax; i += chartIncrements) {
  initData.push(null);
  initLabels.push(i);
}
var chartOptions = {
  type: 'line',
  steppedLine: true,
  options: {
    elements: {
      point: {
        radius: 0
      }
    }
  },
  data: {
    labels: initLabels,
    datasets: [
      {
        label: 'Win',
        data: initData,
        backgroundColor: 'rgba(41, 160, 59, 0.2)',
        borderColor: 'rgba(41, 160, 59, 1)',
        borderWidth: 1
      }, {
        label: 'Loss',
        data: initData,
        backgroundColor: 'rgba(219, 50, 58, 0.2)',
        borderColor: 'rgba(219, 50, 58,1)',
        borderWidth: 1
      }, {
        label: 'Tie',
        data: initData,
        backgroundColor: 'rgba(255, 206, 86, 0.2)',
        borderColor: 'rgba(255, 206, 86, 1)',
        borderWidth: 1
      }
    ]
  }
};

function InteractiveChart(chartElementId, sliderId, percentWinId, percentTieId,
    percentLossId, leadId, gameTimeId, gamePickerId, includeExpectedPoints) {
  this.myChart = new Chart(
    document.getElementById(chartElementId).getContext('2d'), chartOptions);
  this.slider = document.getElementById(sliderId);
  this.percentWin = document.getElementById(percentWinId);
  this.percentTie = document.getElementById(percentTieId);
  this.percentLoss = document.getElementById(percentLossId);
  this.lead = document.getElementById(leadId);
  this.gameTime = document.getElementById(gameTimeId);
  this.gamePicker = document.getElementById(gamePickerId);

  this.slider.min = Math.min(0, game[game.length - 1][0]);
  this.slider.max = game[0][0];
  this.slider.value = slider.min;
  this.slider.addEventListener('input', this.update.bind(this));
  this.gamePicker.addEventListener('change', this.changeGame.bind(this));
  this.includeExpectedPoints = includeExpectedPoints;
  this.update();
}

InteractiveChart.prototype.update = function() {
  var nearestPoint;
  var nearestIndex = 0;
  var nearestDistance = 100000000;
  var gameLength = game[0][0] - Math.min(0, game[game.length - 1][0]);
  var sliderConversionConstant =
      parseInt(this.slider.max) + parseInt(this.slider.min);
  var convertedSliderValue =
      sliderConversionConstant - parseInt(this.slider.value);
  for (var i = 0; i < game.length; i++) {
    var distanceFromSlider = Math.abs(convertedSliderValue - game[i][0]);
    if (distanceFromSlider < nearestDistance) {
      nearestIndex = i;
      nearestDistance = distanceFromSlider;
    }
  }
  var gameRow = game[nearestIndex];
  // The center point of the curve
  var lead = Decimal(gameRow[1]);
  if (!gameRow[5]) {
    // Home team has the ball. ScoreDiff is the lead of the possessing team.
    lead = lead.times(-1);
  }
  var mu = lead;
  // The flatness of the curve.
  var sliderValue = Decimal(parseInt(this.slider.value));
  var sliderMax = Decimal(parseInt(this.slider.max));
  var percentRemaining = (new Decimal(1))
      .minus(sliderValue.dividedBy(sliderMax));
  var sigma = (new Decimal(13.45)).times(percentRemaining);
  var win = [];
  var loss = [];
  var tie = [];
  var ep;
  if (this.includeExpectedPoints) {
    ep = expectedPoints(gameRow[2], gameRow[3], gameRow[4]);
    console.log(gameRow);
    if (!gameRow[5]) {
      ep = -1 * ep;
    }
    mu = mu.plus(ep);
    console.log('mu = ' + mu + ', points = ' + ep + ', lead = ' + lead);
  }
  for (var i = -30; i < 30; i += chartIncrements) {
    var probability = probabilityBetween(
      i - chartIncrements / 2, i + chartIncrements / 2, mu, sigma);
    win.push(i >= 0.5
      ? probability
      : null);
    tie.push(i >= -0.5 && i <= 0.5
      ? probability
      : null);
    loss.push(i <= -0.5
      ? probability
      : null);
  }
  this.myChart.data.datasets[0].data = win;
  this.myChart.data.datasets[1].data = loss;
  this.myChart.data.datasets[2].data = tie;
  this.myChart.update();
  this.percentWin.innerHTML =
    formatPercent(probabilityBetween(0.5, Infinity, mu, sigma));
  this.percentTie.innerHTML =
    formatPercent(probabilityBetween(-0.5, 0.5, mu, sigma));
  this.percentLoss.innerHTML =
    formatPercent(probabilityBetween(Number.NEGATIVE_INFINITY, -0.5, mu, sigma));
  this.lead.innerHTML = lead;
  this.gameTime.innerHTML =
    formatGameTime(sliderValue - parseInt(this.slider.min), gameLength);
  if (this.includeExpectedPoints) {
    document.getElementById('possessor').innerHTML = gameRow[6];
    document.getElementById('down').innerHTML = gameRow[4];
    document.getElementById('yards-to-first').innerHTML = gameRow[3];
    document.getElementById('yards-to-goal').innerHTML = gameRow[2];
    document.getElementById('expected-points').innerHTML = ep.toFixed(2);
  }
};

InteractiveChart.prototype.changeGame = function() {
  gameIndex = parseInt(this.gamePicker.value);
  game = games[gameIndex];
  this.slider.min = Math.min(0, game[game.length - 1][0]);
  this.slider.max = game[0][0];
  this.slider.value = slider.min;
  this.update();
}

function formatGameTime(currentTime, gameLength) {
  var quarter = (Math.floor(currentTime / 900) + 1).toFixed(0);
  var secondsLeftInQuarter = 900 - (currentTime % 900);
  var minutesLeftInQuarter = Math.floor(secondsLeftInQuarter / 60)
    .toLocaleString(undefined, {minimumIntegerDigits: 2, useGrouping:false});
  var remainderSecondsLeftInQuarter = (secondsLeftInQuarter % 60)
    .toLocaleString(undefined, {minimumIntegerDigits: 2, useGrouping:false});
  return (currentTime >= 3600 ? "OT" : "Q" + quarter)
    + " " + minutesLeftInQuarter + ":" + remainderSecondsLeftInQuarter;
}

function formatPercent(number) {
  return (number * 100).toFixed(2);
}

function gaussian(x, mu, sigma) {
  x = new Decimal(x);
  return gaussianConstant.times(x.minus(mu).dividedBy(sigma).toPower(2).times(-0.5).exp()).dividedBy(sigma);
}

function probabilityBetween(from, to, mu, sigma) {
  var remove = normalCdf(from, mu, sigma);
  var total = normalCdf(to, mu, sigma);
  return total - remove;
}

// An approximation of the right thing, pulled off the internet.
function normalCdf(to, mu, sigma) {
  var z = (to - mu) / Math.sqrt(2 * sigma * sigma);
  var t = 1 / (1 + 0.3275911 * Math.abs(z));
  var a1 = 0.254829592;
  var a2 = -0.284496736;
  var a3 = 1.421413741;
  var a4 = -1.453152027;
  var a5 = 1.061405429;
  var erf = 1 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-z * z);
  var sign = z < 0
    ? -1
    : 1;
  return 0.5 * (1 + sign * erf);
}

function expectedPoints(distanceToGoal, yardsToFirstDown, down) {
  return 3.5263
      + distanceToGoal * -0.0445
      + yardsToFirstDown * -0.0471
      + (down == 1 ? 2.0722 : 0)
      + (down == 2 ? 1.6599 : 0)
      + (down == 3 ? 1.0870 : 0);
}

/* I know it doesn't need to be this function */
function main() {
  new InteractiveChart('chart',
      'slider',
      'percent-win',
      'percent-tie',
      'percent-loss',
      'lead',
      'game-time',
      'game-picker',
      false);
  new InteractiveChart('chart-with-points',
      'slider-with-points',
      'percent-win-with-points',
      'percent-tie-with-points',
      'percent-loss-with-points',
      'lead-with-points',
      'game-time-with-points',
      'game-picker-with-points',
      true);
}

main();
