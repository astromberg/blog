
// 2009091304, 2016103000, 2013120800, 2013120805
var games = [
  [
    [3600,0], [3599,0], [3559,0], [3553,0], [3515,0], [3469,0], [3465,0],
    [3429,0], [3393,0], [3388,-3], [3381,-3], [3345,-3], [3304,-3],
    [3273,-3], [3264,-3], [3229,-3], [3197,-3], [3155,-3], [3125,-3],
    [3115,-3], [3081,-3], [3045,-3], [3010,-3], [2971,-3], [2928,-3],
    [2887,-3], [2837,-3], [2793,-3], [2755,-3], [2710,-3], [2706,-3],
    [2703,0], [2700,0], [2664,0], [2617,0], [2591,0], [2576,0], [2547,0],
    [2514,0], [2477,0], [2469,6], [2469,7], [2462,7], [2417,7], [2383,7],
    [2357,7], [2316,7], [2274,7], [2267,7], [2236,7], [2198,7], [2160,7],
    [2157,4], [2157,4], [2123,4], [2079,4], [2053,4], [2045,4], [2042,4],
    [2042,4], [2000,4], [1950,4], [1943,4], [1939,4], [1920,4],
    [1906,4], [1890,-2], [1884,-2], [1880,-2], [1874,-2], [1871,-2],
    [1864,-2], [1860,-2], [1815,-2], [1800,-2], [1790,-2], [1755,-2],
    [1721,-2], [1721,-2], [1667,-2], [1660,-2], [1629,-2], [1591,-2],
    [1586,-2], [1551,-2], [1510,-2], [1507,4], [1507,5], [1499,5],
    [1462,5], [1425,5], [1418,5], [1373,5], [1334,5], [1291,5], [1269,5],
    [1233,5], [1202,5], [1173,5], [1131,5], [1091,5], [1051,5], [1011,5],
    [972,5], [966,11], [966,12], [960,12], [934,12], [903,12], [900,12],
    [900,12], [865,12], [859,12], [859,12], [808,12], [803,12], [795,12],
    [767,12], [763,12], [721,12], [715,12], [703,12], [680,12], [657,12],
    [639,12], [615,12], [601,12], [566,12], [535,12], [491,12], [458,12],
    [419,12], [415,15], [408,15], [408,15], [405,15], [398,15], [381,15],
    [371,15], [358,21], [358,22], [353,22], [335,22], [308,22], [304,22],
    [300,22], [292,22], [287,22], [245,22], [200,22], [192,22], [183,22],
    [159,22], [130,22], [124,22], [116,22], [97,22], [74,22], [68,22],
    [59,22], [35,22], [28,16], [28,15], [28,15]
  ],
  [
    [3600,0], [3594,0], [3574,0], [3530,0], [3504,0], [3500,0], [3459,0],
    [3454,0], [3405,0], [3363,0], [3328,0], [3290,0], [3250,0], [3246,0],
    [3204,0], [3164,0], [3158,-6], [3158,-7], [3147,-7], [3110,-7], [3070,-7],
    [3032,-7], [3009,-7], [2976,-7], [2938,-7], [2931,-1], [2931,0], [2927,0],
    [2874,0], [2851,0], [2810,0], [2778,0], [2736,0], [2700,0], [2669,0],
    [2645,0], [2597,0], [2590,0], [2585,0], [2554,0], [2550,0], [2540,0],
    [2522,0], [2481,0], [2443,0], [2425,0], [2390,0], [2348,0], [2343,0],
    [2301,0], [2296,-3], [2296,-3], [2271,-3], [2237,-3], [2195,-3], [2179,-3],
    [2136,-3], [2097,-3], [2053,-3], [2009,-3], [2005,-3], [1999,-3], [1953,-3],
    [1944,-3], [1920,-3], [1917,-3], [1910,-3], [1892,-3], [1888,-3], [1881,-3],
    [1876,-3], [1848,-3], [1839,-3], [1835,-3], [1829,-3], [1804,-3], [1800,-3],
    [1800,-3], [1768,-3], [1740,-3], [1704,-3], [1666,-3], [1646,-3], [1642,-3],
    [1639,-3], [1603,-3], [1583,-3], [1546,-3], [1542,3], [1542,3], [1542,3],
    [1537,3], [1499,3], [1465,3], [1453,3], [1425,3], [1387,3], [1359,3],
    [1353,3], [1316,3], [1297,3], [1274,3], [1252,3], [1220,3], [1215,9],
    [1215,10], [1210,10], [1184,10], [1162,10], [1131,10], [1092,10], [1082,4],
    [1082,3], [1082,3], [1054,3], [1025,3], [989,3], [959,3], [927,3], [900,3],
    [875,3], [870,3], [835,3], [828,3], [782,3], [745,3], [704,3], [670,3],
    [631,3], [616,3], [579,3], [570,-3], [570,-4], [570,-4], [549,-4], [514,-4],
    [484,-4], [462,-4], [423,-4], [418,-4], [414,2], [414,3], [406,3], [369,3],
    [366,3], [359,3], [344,3], [299,3], [260,3], [221,3], [215,3], [212,3],
    [207,3], [195,3], [161,3], [157,3], [127,3], [120,3], [116,3], [87,3],
    [81,3], [76,3], [71,3], [67,0], [67,0], [46,0], [38,0], [32,0], [25,0],
    [21,0], [11,0], [3,0], [0,0], [0,0], [-36,0], [-77,0], [-97,0], [-127,0],
    [-168,0], [-173,0], [-178,0], [-186,0], [-212,0], [-238,0], [-267,0],
    [-310,0], [-317,0], [-361,0], [-391,0], [-435,0], [-439,0], [-480,0],
    [-487,0], [-516,0], [-544,0], [-572,0], [-611,0], [-649,0], [-655,0],
    [-688,0], [-692,0], [-697,0], [-728,0], [-767,0], [-771,0], [-780,0],
    [-803,0], [-809,0], [-829,0], [-838,0], [-846,0], [-854,0], [-870,0],
    [-898,0]
  ],
  [
    [3600	,	0], [3595	,	0], [3595	,	0], [3558	,	0], [3558	,	0], [3480	,	0],
    [3447	,	0], [3413	,	0], [3377	,	0], [3368	,	0], [3334	,	0], [3292	,	0],
    [3286	,	0], [3275	,	0], [3247	,	0], [3238	,	0], [3233	,	0], [3221	,	0],
    [3185	,	0], [3173	,	0], [3124	,	0], [3096	,	0], [3089	,	0], [3035	,	0],
    [3002	,	0], [2960	,	0], [2954	,	6], [2954	,	7], [2948	,	7], [2939	,	7],
    [2898	,	7], [2858	,	7], [2815	,	7], [2806	,	7], [2803	,	7], [2791	,	7],
    [2791	,	7], [2757	,	7], [2752	,	7], [2706	,	7], [2700	,	7], [2664	,	7],
    [2661	,	7], [2625	,	7], [2617	,	7], [2606	,	7], [2600	,	7], [2556	,	7],
    [2549	,	7], [2541	,	7], [2537	,	7], [2493	,	7], [2472	,	7], [2459	,	7],
    [2428	,	7], [2423	,	7], [2418	,	7], [2410	,	7], [2366	,	7], [2361	,	7],
    [2322	,	7], [2283	,	7], [2247	,	7], [2240	,	7], [2198	,	7], [2192	,	7],
    [2151	,	7], [2116	,	7], [2073	,	7], [2068	,	4], [2061	,	4], [2033	,	4],
    [2016	,	4], [1983	,	4], [1977	,	4], [1965	,	4], [1930	,	4], [1920	,	4],
    [1884	,	4], [1876	,	4], [1869	,	4], [1862	,	4], [1852	,	4], [1844	,	4],
    [1840	,	4], [1832	,	4], [1826	,	4], [1820	,	4], [1820	,	4], [1804	,	4],
    [1800	,	4], [1792	,	4], [1755	,	4], [1717	,	4], [1711	,	4], [1679	,	4],
    [1638	,	4], [1631	,	4], [1627	,	4], [1622	,	1], [1617	,	1], [1580	,	1],
    [1552	,	1], [1514	,	1], [1505	,	1], [1479	,	1], [1440	,	1], [1434	,	1],
    [1423	,	1], [1394	,	1], [1352	,	1], [1319	,	1], [1285	,	1], [1250	,	1],
    [1221	,	1], [1215	,	1], [1182	,	1], [1174	,	1], [1137	,	1], [1094	,	1],
    [1089	,	1], [1078	,	1], [1047	,	1], [1003	,	1], [969	,	1], [962	,	1],
    [962	,	1], [906	,	1], [900	,	1], [868	,	1], [862	,	-5], [862	,	-5],
    [862	,	-5], [822	,	-5], [792	,	-5], [761	,	-5], [726	,	-5], [695	,	-5],
    [642	,	-5], [636	,	-5], [632	,	-5], [596	,	-5], [591	,	-5], [581	,	-5],
    [554	,	-5], [547	,	-5], [516	,	-5], [491	,	-5], [485	,	-5], [474	,	-5],
    [467	,	-5], [428	,	-5], [404	,	-5], [392	,	-5], [366	,	-5], [338	,	-5],
    [311	,	-5], [303	,	-5], [272	,	-5], [243	,	-5], [200	,	-5], [155	,	-5],
    [131	,	-5], [127	,	-5], [125	,	1], [125	,	1], [125	,	3], [120	,	3],
    [105	,	3], [87	,	-3], [87	,	-4], [76	,	2], [76	,	3], [71	,	3], [65	,	3],
    [61	,	3], [45	,	-3], [45	,	-4], [45	,	-4], [38	,	-4], [32	,	-4],
    [24	,	-4], [18	,	-4], [9	,	-4], [4	,	2], [4	,	3],
  ],
  [
    [3600	,	0], [3597	,	0], [3591	,	0], [3551	,	0], [3522	,	0], [3511	,	0],
    [3486	,	0], [3472	,	0], [3428	,	0], [3395	,	0], [3388	,	0], [3351	,	0],
    [3304	,	0], [3273	,	0], [3230	,	0], [3199	,	0], [3158	,	0], [3113	,	0],
    [3086	,	0], [3039	,	0], [2998	,	0], [2987	,	0], [2948	,	0], [2916	,	0],
    [2910	,	0], [2898	,	0], [2860	,	0], [2820	,	0], [2786	,	0], [2781	,	0],
    [2738	,	0], [2700	,	0], [2661	,	0], [2652	,	0], [2645	,	0], [2615	,	0],
    [2606	,	0], [2594	,	0], [2559	,	0], [2553	,	0], [2546	,	0], [2539	,	0],
    [2526	,	0], [2484	,	0], [2442	,	0], [2437	,	0], [2407	,	0], [2402	,	-6],
    [2402	,	-8], [2402	,	-8], [2373	,	-8], [2346	,	-8], [2317	,	-8],
    [2287	,	-8], [2254	,	-8], [2245	,	-8], [2206	,	-8], [2165	,	-8],
    [2159	,	-8], [2150	,	-8], [2124	,	-8], [2091	,	-8], [2058	,	-8],
    [2029	,	-8], [2.00E+03	,	-8], [1993	,	-8], [1959	,	-8], [1936	,	-8],
    [1920	,	-8], [1914	,	-8], [1880	,	-8], [1874	,	-8], [1856	,	-8],
    [1849	,	-8], [1844	,	-8], [1839	,	-8], [1800	,	-8], [1800	,	-8],
    [1797	,	-8], [1765	,	-8], [1733	,	-8], [1710	,	-8], [1704	,	-8],
    [1699	,	-8], [1692	,	-8], [1654	,	-8], [1609	,	-8], [1572	,	-8],
    [1534	,	-8], [1495	,	-8], [1492	,	-8], [1452	,	-8], [1420	,	-8],
    [1414	,	-8], [1378	,	-8], [1344	,	-8], [1313	,	-8], [1297	,	-14],
    [1291	,	-14], [1262	,	-14], [1226	,	-14], [1219	,	-14], [1187	,	-14],
    [1153	,	-14], [1145	,	-8], [1145	,	-8], [1138	,	-8], [1104	,	-8],
    [1066	,	-8], [1027	,	-8], [985	,	-8], [936	,	-8], [931	,	-8], [924	,	-8],
    [900	,	-8], [898	,	-8], [891	,	-8], [882	,	-8], [874	,	-2], [874	,	-2],
    [874	,	0], [860	,	-6], [860	,	-6], [860	,	-6], [854	,	-6], [828	,	-6],
    [803	,	-6], [793	,	0], [793	,	2], [788	,	2], [785	,	2], [776	,	2],
    [755	,	2], [747	,	2], [740	,	2], [692	,	2], [659	,	2], [612	,	2],
    [584	,	2], [568	,	2], [530	,	2], [498	,	2], [498	,	8], [498	,	8],
    [489	,	8], [446	,	8], [435	,	8], [397	,	8], [375	,	8], [329	,	8],
    [280	,	8], [231	,	8], [186	,	8], [178	,	14], [178	,	14], [171	,	14],
    [167	,	14], [164	,	14], [159	,	14], [153	,	14], [147	,	14], [140	,	14],
    [120	,	14], [50	,	14], [31	,	14]
  ]
];

var gameIndex = 1;
var game = games[gameIndex];
var gaussianConstant = new Decimal(1).dividedBy(Math.sqrt(2 * Math.PI));
var ctx = document.getElementById("chart").getContext("2d");
var chartMin = -30;
var chartMax = 30;
var chartIncrements = 0.5;
var autoAdvanceSpeedMillis = 50;
var initData = [];
var initLabels = [];
var pointBackgroundColors = [];
for (var i = chartMin; i <= chartMax; i += chartIncrements) {
  initData.push(null);
  initLabels.push(i);
}
var myChart = new Chart(ctx, {
  type: 'line',
  steppedLine: true,
  options: {
    elements: {
      point: {
        radius: 0
      }
    }
  },
  data: {
    labels: initLabels,
    datasets: [
      {
        label: 'Win',
        data: initData,
        backgroundColor: ['rgba(41, 160, 59, 0.2)'],
        borderColor: ['rgba(41, 160, 59, 1)'],
        borderWidth: 1
      }, {
        label: 'Loss',
        data: initData,
        backgroundColor: ['rgba(219, 50, 58, 0.2)'],
        borderColor: ['rgba(219, 50, 58,1)'],
        borderWidth: 1
      }, {
        label: 'Tie',
        data: initData,
        backgroundColor: ['rgba(255, 206, 86, 0.2)'],
        borderColor: ['rgba(255, 206, 86, 1)'],
        borderWidth: 1
      }
    ]
  }
});

function update() {
  var slider = document.getElementById('slider');
  var mu = 0;
  var nearestPoint;
  var nearestIndex = 0;
  var nearestDistance = 100000000;
  var gameLength = game[0][0] - Math.min(0, game[game.length - 1][0]);
  var sliderConversionConstant = parseInt(slider.max) + parseInt(slider.min);
  var convertedSliderValue = sliderConversionConstant - parseInt(slider.value);
  for (var i = 0; i < game.length; i++) {
    var distanceFromSlider = Math.abs(convertedSliderValue - game[i][0]);
    if (distanceFromSlider < nearestDistance) {
      nearestIndex = i;
      nearestDistance = distanceFromSlider;
    }
  }
  // The center point of the curve
  var mu = Decimal(game[nearestIndex][1]);
  // The flatness of the curve.
  var sliderValue = Decimal(parseInt(slider.value));
  var sliderMax = Decimal(parseInt(slider.max));
  var percentRemaining = (new Decimal(1)).minus(sliderValue.dividedBy(sliderMax));
  var sigma = (new Decimal(13.45)).times(percentRemaining);
  var win = [];
  var loss = [];
  var tie = [];
  for (var i = -30; i < 30; i += chartIncrements) {
    var probability = probabilityBetween(i - chartIncrements / 2, i + chartIncrements / 2, mu, sigma);
    win.push(i >= 0.5
      ? probability
      : null);
    tie.push(i >= -0.5 && i <= 0.5
      ? probability
      : null);
    loss.push(i <= -0.5
      ? probability
      : null);
  }
  myChart.data.datasets[0].data = win;
  myChart.data.datasets[1].data = loss;
  myChart.data.datasets[2].data = tie;
  myChart.update();
  document.getElementById('percent-win').innerHTML =
    formatPercent(probabilityBetween(0.5, Infinity, mu, sigma));
  document.getElementById('percent-tie').innerHTML =
    formatPercent(probabilityBetween(-0.5, 0.5, mu, sigma));
  document.getElementById('percent-loss').innerHTML =
    formatPercent(probabilityBetween(Number.NEGATIVE_INFINITY, -0.5, mu, sigma));
  document.getElementById('lead').innerHTML = mu;
  document.getElementById('game-time').innerHTML =
    formatGameTime(sliderValue - parseInt(slider.min), gameLength);
}

function formatGameTime(currentTime, gameLength) {
  var quarter = (Math.floor(currentTime / 900) + 1).toFixed(0);
  var secondsLeftInQuarter = 900 - (currentTime % 900);
  var minutesLeftInQuarter = Math.floor(secondsLeftInQuarter / 60)
    .toLocaleString(undefined, {minimumIntegerDigits: 2, useGrouping:false});
  var remainderSecondsLeftInQuarter = (secondsLeftInQuarter % 60)
    .toLocaleString(undefined, {minimumIntegerDigits: 2, useGrouping:false});
  return (currentTime >= 3600 ? "OT" : "Q" + quarter)
    + " " + minutesLeftInQuarter + ":" + remainderSecondsLeftInQuarter;
}

function formatPercent(number) {
  return (number * 100).toFixed(2);
}

function gaussian(x, mu, sigma) {
  x = new Decimal(x);
  return gaussianConstant.times(x.minus(mu).dividedBy(sigma).toPower(2).times(-0.5).exp()).dividedBy(sigma);
}

function probabilityBetween(from, to, mu, sigma) {
  var remove = normalCdf(from, mu, sigma);
  var total = normalCdf(to, mu, sigma);
  return total - remove;
}

// An approximation of the right thing, pulled off the internet.
function normalCdf(to, mu, sigma) {
  var z = (to - mu) / Math.sqrt(2 * sigma * sigma);
  var t = 1 / (1 + 0.3275911 * Math.abs(z));
  var a1 = 0.254829592;
  var a2 = -0.284496736;
  var a3 = 1.421413741;
  var a4 = -1.453152027;
  var a5 = 1.061405429;
  var erf = 1 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-z * z);
  var sign = z < 0
    ? -1
    : 1;
  return 0.5 * (1 + sign * erf);
}

function changeGame() {
  gameIndex = parseInt(document.getElementById('game-picker').value);
  game = games[gameIndex];
  var slider = document.getElementById('slider');
  slider.min = Math.min(0, game[game.length - 1][0]);
  slider.max = game[0][0];
  slider.value = slider.min;
  update();
}

function makeVis() {
  var slider = document.getElementById('slider');
  slider.min = Math.min(0, game[game.length - 1][0]);
  slider.max = game[0][0];
  slider.value = slider.min;
  slider.addEventListener('input', function() {
    update(false);
  });
  document.getElementById('game-picker').addEventListener('change', changeGame);
  update();
}

makeVis();
